'use strict';

/**
 * Generating a name for an index, that is similar to the
 * index name that's generated by MongoDB. To help us use the indexExists function.
 *
 * @param {object} indexKeys - the indexes keys object
 * @returns {string} - the index name string
 */
const generateIndexName = (indexKeys) => {
  const keys = Object.keys(indexKeys);

  return keys.length > 1
    ? keys.reduce((acc, curr, index) => acc + `${index === 1 ? `_${indexKeys[acc]}` : ''}_${curr}_${indexKeys[curr]}`)
    : `${keys[0]}_${indexKeys[keys[0]]}`;
};

/**
 * This module contains a methods that ensures the existence of an index
 * before creating or removing it
 *
 * @module IndexExistsHelper
 */
module.exports = {
  /**
   * Creates an index after making sure it doesn't exist already
   *
   * @param {Object} collection - the mongoose collection object
   * @param {Object} indexesKeys - the indexes object
   * {
   *   <key>: <number>
   * }
   * @param {Object} options - the possible indexing options
   */
  ensureIndexExists: async (collection, indexesKeys, options) => {
    const indexName = options && options.name ? options.name : generateIndexName(indexesKeys);

    const doesExist = await collection.indexExists(indexName);

    if (doesExist) {
      return doesExist;
    } else {
      return await collection.createIndex(indexesKeys, options ? options : null);
    }
  },
  /**
   * Drops an index after making sure it does exist
   *
   * @param {Object} collection - the mongoose collection object
   * @param {Object} indexesKeys - the indexes object
   * {
   *   <key>: <number>
   * } (make sure to include the name within the options here if a name is specified above)
   * @param {Object} options - the possible options
   */
  ensureIndexRemoved: async (collection, indexesKeys, options) => {
    const indexName = options && options.name ? options.name : generateIndexName(indexesKeys);

    const doesExist = await collection.indexExists(indexName);

    if (!doesExist) {
      return doesExist;
    } else {
      return await collection.dropIndex(indexesKeys);
    }
  }
};
